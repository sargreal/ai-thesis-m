
// FIXME: There is an issue with ingredients being reused in different orders

// Area definitions adapted from Race domain
type Area ;
// with {
//   constant boolean isManipulationArea;
//   constant ManArea man_area;
// };
type ManArea < Area; // area from which a person manipulates
type OccupationArea < Area with {
  fluent boolean occupied;
}; // area where an ingrediant can be located
type StorageArea < OccupationArea; // area where objects are stored initially
type PlArea < OccupationArea;  // area to place objects
type ArrangeArea < PlArea; // area to arrange objects
type ToolArea < PlArea; // area to work with tools
type NavArea < Area; // other area where a person can be 

// this would be useless with a primitive to check the type of a variable in ANML
// forall(ManArea a) { a.isManipulationArea := true; };
// forall((PlArea or NavArea) b) { b.isManipulationArea := false; };

type Person with {
  fluent (NavArea or ManArea) loc;
  // If the Person is carrying anything
  fluent boolean carrying;
  // If the Person is doing something
  fluent boolean busy;
};

type Cook < Person;
type Client < Person;

type Tool with {
  constant PlArea loc;
  fluent boolean processing;
};

type Knife < Tool;
type Pot < Tool;

type Carryable with {
  // Can either be at an placement area, carried by a Person or on a Tableware (Tablewares can be stacked)
  fluent (OccupationArea or Person or Tableware) loc;
};

type Tableware < Carryable;

type Plate < Tableware;

type Ingredient < Carryable with {
  fluent boolean arranged;
  fluent boolean prepared;
};

type Nori < Ingredient;

type Choppable < Ingredient with {
  fluent boolean chopped;
};

type Shrimp < Choppable;
type Fish < Choppable;
type Lettuce < Choppable;
type Tomato < Choppable;
type Cucumber < Choppable;

type Boilable < Ingredient with {
  fluent boolean boiled;
};

type Rice < Boilable;

// an object on 'pl' can be manipulated from 'man' and 'man' can be accessed from 'pre'
constant boolean connected(OccupationArea a, ManArea b);
constant integer distance(ManArea a, ManArea b);

// Constants for durations of actions
constant integer arrangetime(Ingredient i);
constant integer droptime(Carryable c);
constant integer pickuptime(Carryable c);
constant integer givetime(Carryable c);
constant integer choptime(Choppable a);
constant integer boiltime(Boilable a);

/*** Primitive actions ***/

action a_move(Person p, ManArea to) {
  // FIXME: Maybe a person should be able to move without being motivated by a method/decomposition?
  motivated;
  duration := 5;
  constant ManArea from;
  // duration := distance(from, to);
  from != to;
  [all] {
    p.loc == from :-> to;
  };
};

action a_arrange(Person p, Ingredient i, Tableware t) {
  motivated;
  duration := arrangetime(i);

  constant ArrangeArea pl;
  constant ManArea man;
  connected(pl, man);

  [all] {
    t.loc == pl;
    p.loc == man;
    i.loc == p :-> t;
    p.carrying == true :-> false;
    i.arranged == false :-> true;
  };
};


action a_drop(Person p, Carryable ca) {
  motivated;
  duration := droptime(ca);

  constant PlArea pl;
  constant ManArea man;
  connected(pl, man);

  [all] {
    p.loc == man;
    ca.loc == p :-> pl;
    p.carrying == true :-> false;
  };
};

action a_pick_up(Person p, Carryable ca) {
  motivated;
  duration := pickuptime(ca);

  constant OccupationArea oc;
  constant ManArea man;
  connected(oc, man);

  [all] {
    p.loc == man;
    ca.loc == oc :-> p; 
    p.carrying == false :-> true;
  };
};

action a_give(Person p1, Person p2, Carryable c) {
  motivated;
  duration := givetime(c);

  constant ManArea m;
  [all] {
    p1.loc == m;
    p2.loc == m;
    p1.carrying == true :-> false;
    p2.carrying == false :-> true;
    c.loc == p1 :-> p2;
  };
};

action a_chop(Cook co, Choppable ch, Knife k) {
  motivated;
  duration := choptime(ch);

  constant ManArea man;
  constant ToolArea ta;
  connected(ta, man);
  k.loc == ta;

  [all] {
    co.loc == man;
    ch.loc == ta;
    k.processing == false :-> false;
    co.busy == false :-> false;
    co.carrying == false :-> false;
    ch.chopped == false :-> true;
  };
};

// action a_boil(Cook c, Boilable b, Pot p) {
//   motivated;
//   duration := boiltime(b);

//   constant ManArea man;
//   connected(p.loc, man);

//   // Cook should be at the pot at the beginning and end
//   // FIXME: Does not support different cooks at the beginning and end
//   [start,end] {
//     c.loc == man;
//   };
//   // FIXME: Same as with busy cook
//   // [start,end] contains p.processing == true;

//   [all] {
//     b.loc == p.loc;
//     b.boiled == false :-> true;
//   };
// };

/*** Methods ***/

action m_get_to(Person p, ManArea to) {
  motivated;
  // Already there
  :decomposition {
    [all] p.loc == to;
  };
  :decomposition {
    [all] contains ordered(
      a_move(p, to)
    );
  };
};

action m_fetch(Cook co, Carryable ca) {
  motivated;
  // Cook already has the ingredient
  :decomposition {
    [all] ca.loc == co;
  };
  // Go to carryables location and get it
  :decomposition {
    constant OccupationArea pl;
    constant ManArea m;
    connected(pl, m);
    [start] ca.loc == pl;
    [all] contains ordered(
      m_get_to(co, m),
      a_pick_up(co, ca)
    );
  };
  // Another cook has the carryable and it has to be given to the cook
  // :decomposition {
  //   constant Cook co2;
  //   constant ManArea m;
  //   [all] co2.loc == m;
  //   [start] ca.loc == co2;
  //   [all] contains ordered(
  //     m_get_to(co, m),
  //     a_give(co2, co, ca)
  //   );
  // };
};

action m_transport_to(Carryable ca, PlArea pl) {
  motivated;
  // Already there
  :decomposition {
    ca.loc == pl;
  };
  // Fetch, get to target man area and then drop
  :decomposition {
    constant Cook co;
    constant ManArea m;
    connected(pl, m);
    [all] contains ordered(
      m_fetch(co, ca),
      m_get_to(co, m),
      a_drop(co, ca)
    );
  };
  // Let cook move back to original position
  // :decomposition {
  //   constant Cook co;
  //   constant ManArea currentCookLoc;
  //   constant ManArea m;
  //   connected(pl, m);
  //   [start] co.loc == currentCookLoc;
  //   [all] contains ordered(
  //     m_fetch(co, ca),
  //     m_get_to(co, m),
  //     a_drop(co, ca),
  //     m_get_to(co, currentCookLoc)
  //   );
  // };
};

// action m_boil(Boilable b) {
//   motivated;
//   :decomposition {

//     constant Pot p;
//     constant Cook c;
//     constant ManArea m;
//     constant ToolArea ta;
//     p.loc == ta;

//     connected(ta, m);

//     [all] contains ordered(
//       m_transport_to(b,ta),
//       m_get_to(c, m),
//       a_boil(c, b, p),
//       // FIXME: No guarantee that the cook is still there?
//       m_get_to(c, m),
//       a_pick_up(c, b)
//     );
//   };
// };

action m_chop(Choppable ch) {
  motivated;
  :decomposition {
    ch.chopped == true;
    // ch.prepared == true;
  };
  :decomposition {

    constant Knife k;
    constant Cook co;
    constant ToolArea p;
    k.loc == p;

    [all] contains ordered(
      m_transport_to(ch, p),
      a_chop(co, ch, k)
    );
  };
  // Let cook move back to original position
  // :decomposition {

  //   constant Knife k;
  //   constant Cook co;
  //   constant ToolArea p;
  //   constant ManArea currentCookLoc;
  //   k.loc == p;

  //   [start] co.loc == currentCookLoc;
  //   [all] contains ordered(
  //     m_transport_to(ch, p),
  //     a_chop(co, ch, k),
  //     m_get_to(co, currentCookLoc)
  //   );
  // };
};

/** FIXME: The preparation actions can be fooled by using the m_chop decomposition with being prepared and  **/

// action m_prepare_ingredient_chop(Choppable i) {
//   motivated;
//   :decomposition {
//     [all] i.prepared == false :-> true;
//     [all] contains ordered(
//       m_chop(i)
//     );
//   };
// };

// action m_prepare_lettuce(Lettuce l) {
//   motivated;
//   :decomposition {
//     [all] contains ordered(
//       m_prepare_ingredient_chop(l)
//     );
//   };
// };

action m_prepare_tableware(Tableware t) {
  motivated;
  :decomposition {
    constant ArrangeArea a;
    t.loc == a;
  };
  :decomposition {
    constant StorageArea s;
    constant ArrangeArea a;
    [start] t.loc == s;
    [all] contains ordered(
      m_transport_to(t, a)
    );
  };
};


action m_arrange(Ingredient i, Tableware t) {
  motivated;

  // Three Options:
  //  - The ingredient is already on the tableware
  //  - The ingredient has to be added to the tableware
  // :decomposition {
  //   i.loc == t;
  // };

  :decomposition {
    constant ArrangeArea a;
    constant ManArea m;
    constant Cook c;
    connected(a, m);
    [all] t.loc == a;

    [all] contains ordered(
      m_fetch(c, i),
      m_get_to(c, m),
      a_arrange(c, i, t)
    );
  };  
  // Let cook move back to original position
  // :decomposition {
  //   constant ArrangeArea a;
  //   constant ManArea m;
  //   constant Cook co;
  //   constant ManArea currentCookLoc;
  //   connected(a, m);
    
  //   [start] co.loc == currentCookLoc;
  //   [all] t.loc == a;

  //   [all] contains ordered(
  //     m_fetch(co, i),
  //     m_get_to(co, m),
  //     a_arrange(co, i, t),
  //     m_get_to(co, currentCookLoc)
  //   );
  // };
};

action m_deliver(Tableware t, Client cl) {
  motivated;
  // :decomposition {
  //   t.loc == cl;
  // };
  :decomposition {
    constant Cook co;
    constant Area a;
    [all] cl.loc == a;
    [all] contains ordered(
      m_fetch(co, t),
      m_get_to(co, a),
      a_give(co, cl, t)
    );
  };
  // Let cook move back to original position
  // :decomposition {
  //   constant Cook co;
  //   constant ManArea currentCookLoc;
  //   constant Area a;
  //   [all] cl.loc == a;
  //   [all] contains ordered(
  //     m_fetch(co, t),
  //     m_get_to(co, a),
  //     a_give(co, cl, t),
  //     m_get_to(co, currentCookLoc)
  //   );
  // };
};

/*** Recipes ***/

action order_lettuce_salad(Client cl/*, Lettuce l, Tableware t*/) {
  motivated;
  :decomposition {
    constant Lettuce l;
    constant Tableware t;
    [all] contains ordered (
      unordered(
        m_prepare_tableware(t),
        m_chop(l),
        m_arrange(l, t)
      ),
      m_deliver(t, cl)
    );
  };
};

action order_lettuce_tomato_salad(Client cl/*, Lettuce l, Tomato to, Tableware t*/) {
  motivated;
  // duration :in [0, 600];
  :decomposition {
    constant Lettuce l;
    constant Tomato to;
    constant Tableware t;
    [all] contains {
      t_prep : m_prepare_tableware(t);
      t_chop_l : m_chop(l);
      t_arr_l : m_arrange(l, t);
      t_chop_to : m_chop(to);
      t_arr_to : m_arrange(to, t);
      t_del : m_deliver(t, cl);
    };
    end(t_prep) <= start(t_arr_l);
    end(t_prep) <= start(t_arr_to);
    end(t_chop_l) <= start(t_arr_l);
    end(t_chop_to) <= start(t_arr_to);
    end(t_arr_l) <= start(t_del);
    end(t_arr_to) <= start(t_del);
  };
};

action order_lettuce_tomato_cucumber_salad(Client cl/*, Lettuce l, Tomato to, Cucumber cu, Tableware t*/) {
  motivated;
  // duration :in [0, 900];
  :decomposition {
    constant Lettuce l;
    constant Tomato to;
    constant Cucumber cu;
    constant Tableware t;
    [all] contains {
      t_prep : m_prepare_tableware(t);
      t_chop_l : m_chop(l);
      t_arr_l : m_arrange(l, t);
      t_chop_to : m_chop(to);
      t_arr_to : m_arrange(to, t);
      t_chop_cu : m_chop(cu);
      t_arr_cu : m_arrange(cu, t);
      t_del : m_deliver(t, cl);
    };
    end(t_prep) < start(t_arr_l);
    end(t_prep) < start(t_arr_to);
    end(t_prep) < start(t_arr_cu);
    end(t_chop_l) < start(t_arr_l);
    end(t_chop_to) < start(t_arr_to);
    end(t_chop_cu) < start(t_arr_cu);
    end(t_arr_l) < start(t_del);
    end(t_arr_to) < start(t_del);
    end(t_arr_cu) < start(t_del);
  };
};
